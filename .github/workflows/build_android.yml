# This is a basic workflow to help you get started with Actions

name: Build Android apk

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: FranzDiebold/github-env-vars-action@v1.2.1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradle.
        run: |
          cd client/android
          chmod +x gradle

      - name: Set up Node.js.
        uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install dependencies.
        run: |
          cd client
          npm ci

      - name: Webpack build.
        run: |
          cd client
          npm run build:capacitor

      - name: Copy webpack build.
        run: |
          cd client
          npx cap sync android

      - name: Log gradle version
        run: |
          cd client/android && gradle -v

      - name: Cat build.gradle
        run: |
          cat client/android/capacitor-cordova-android-plugins/build.gradle

      - name: Build apks.
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          cd client/android
          gradle build --warning-mode all

      - name: Check if apks were created.
        run: |
          cd client/android/app/build/outputs/apk/release
          ls -lh

      #
      # - name: Upload release apk.
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: mensa-app-release
      #     path: client/android/app/build/outputs/apk/release/app-release.apk

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +''%Y-%m-%d-%H-%M'')"

      - name: Create release.
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: ${{ steps.date.outputs.date }}
          body: |
            Changes in this Release
            - The devs were too lazy to tell you what changed.
          draft: false
          prerelease: false

      - name: Upload release asset.
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: client/android/app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/zip
