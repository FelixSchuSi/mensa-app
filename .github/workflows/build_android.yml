# This is a basic workflow to help you get started with Actions

name: Build Android apk

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      timestamp: ${{ steps.timestampjob.outputs.timestamp }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradle.
        run: |
          pwd
          cd client/android
          pwd
          chmod +x gradle

      - name: Set up Node.js.
        uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install dependencies.
        run: |
          pwd
          cd client
          pwd
          npm i

      - name: Webpack build.
        run: |
          pwd
          cd client
          pwd
          npm run build:capacitor

      - name: Copy webpack build.
        run: |
          cd client
          npx cap sync

      - name: Build apks.
        run: |
          cd client/android
          gradle build

      - name: Check if apks were created.
        run: |
          cd client/android/app/build/outputs/apk/debug
          ls -lh
          cd ../release/
          ls -lh

      - name: Upload debug apk.
        uses: actions/upload-artifact@v2
        with:
          name: mensa-app-debug
          path: client/android/app/build/outputs/apk/debug/app-debug.apk

      - name: Set current date as env variable.
        run: echo "now=$(date +'%Y-%m-%dT%H:%M:%S')"

      - name: Set current timestamp.
        id: timestampjob
        run: echo "::set-output name=timestamp::$now"

      - name: Create release.
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: tag_${{needs.timestampjob.outputs.timestamp}}
          release_name: Release_${{needs.timestampjob.outputs.timestamp}}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Upload release asset.
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: client/android/app/build/outputs/apk/debug/app-debug.apk
          asset_name: app-debug.apk
          asset_content_type: application/zip
